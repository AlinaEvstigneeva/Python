# Списки - примерно то же самое, что и массивы, только начинаются они не с нуля.

# Создание списка:
# Первый способ
# list_1 = []     # создание пустого списка

# Второй способ
# list_1 = list()     #создание функции, которая будет создавать список.

# Печать списка
# list_1 = [1, 2, 3, 4]
# print(list_1)               #печать в терминале будет с квадратными скобками

# print(*list_1)          #в терминале будет напечатано только содержимое списка (без скобок)

# for i in list_1:
#     print(i)          #пробегая по списку с помощью i распечатывает все его значения

# print(len(list_1))      # команда, позволяющая узнать какое количество значений в списке

# print(list_1[3])      #команда, позволяющая обратиться к какому то конкретному значению, нумерация начинается с нуля.
# print(list_1[-1])   # печать элементов с конца




# Добавление значения в список:
# list_1 = [1, 5]
# print(list_1)

# list_1.append(8)    #функция append добавляет значения в конец списка
# print(list_1)

# list_1.append(85)    #в конечном итоге список будет выглядеть так: [1, 5, 8, 85]
# print(list_1)

# Напишем программу:
# list_1 = []     #создаем пустой список
# for i in range(5):   #переменная i будет двигаться по range от 0 до 4
#     list_1.append(i)    #каждое значение i будет записываться в список list_1
#     print(list_1)




# Удаление последнего элемента из списка:
# list_1 = [ 1, 2, 3, 4, 5]
# print(list_1.pop())     # удаление последнего элемента вып-ся с помощью команды .pop
# print(list_1)       # получаем след спиоск [1, 2, 3, 4]

# Удаление конкретного элемента из списка
# list_1 = [ 1, 2, 3, 4, 5]
# print(list_1.pop(3))     # в скобках pop() указываем номер элемента, который необходимо удалить
# print(list_1)       # получаем след спиоск [1, 2, 3, 5] - 4ку мы удалили

# Добавление элемента на нужную позицию
# list_1 = [ 1, 2, 3, 4, 5]
# print(list_1.insert(2, 13))     # команда insert() принимает два аргумента: 1- позиция, 2 - значение
# print(list_1)       # получаем след спиоск [1, 2, 13, 3, 5] 





# Кортеж - неизменяемый список.
# Его преимущество в том, что он занимает мало памяти и работает быстрее по сравнению со списком.
# Используется тогда, когда нам ни при каких условиях не требуется менять содержимое списка.

# Создание кортежа
# t = ()  #пустой кортеж
# t = (1, 2, 3, 4,)   #после каждого элемента кортежа необходимо ставить запятую

# Преобразование списка в кортеж
# v = [1, 2, 3, 4]
# print(v)

# v = tuple(v)    # команда tuple() преобразовывает список в кортеж
# print(v)

# "Распаковка" кортежа
# a, d, c = v
# print(a, b, c)  # на выходе мы увидим, что каждой переменной присвоено значение элементов кортежа






# Словари - это неупорядоченные коллекции произвольных объектов с доступом по ключу.
# в списках в качестве ключа использется индекс элемента. В словаре для определения элемента 
# используется значение ключа(строка, число).

# d = {}  #создание пустого словаря
# d = dict()  #второй вариант

# d['q'] = 'qwerty'   #результат: {'q': 'qwerty'}
# print(d)

# d['w'] = 'werty'
# print(d)            #результат: {q': 'qwerty' , 'w': 'werty'}

# print(d['q'])   #для вывода значения ключа. Резульатат -> qwerty


# dictionary = {}
# dictionary = {'up': '↑', 'left': '←', 'down': '↓', 'right': '→'}
# print(dictionary) # {'up':'↑', 'left':'←', 'down':'↓', 'right':'→'}
# print(dictionary['left']) # ← типы ключей могут отличаться
# print(dictionary['up']) # ↑ типы ключей могут отличаться
# dictionary['left'] = '⇐'
# print(dictionary['left']) # ⇐
# print(dictionary['type']) # KeyError: 'type'
# del dictionary['left'] # удаление элемента

# for item in dictionary:
#     print(item)             #выводиться будут только ключи: up, left, down, right



# for item in dictionary:
#     print('{}: {}'.format(item, dictionary[item]))  #вывод и ключа и значения ключа





# Множества - содержат в себе уникальные элементы, не обязательно упорядоченные.
# Одно множество может содержать значения любых типов. Если у Вас есть два множества,
# Вы можете совершать над ними любые стандартные операции, например, объединение,
# пересечение и разность.

# colors = {'red', 'green', 'blue'}           # Создание множества. отличие от словаря в том, что нет ключей
# q = set()   # второй вариант
# print(colors) # {'red', 'green', 'blue'}

# colors.add('red')    # Добавление значения в множество. повторяющееся значение не добавится в множетсво
# print(colors) # {'red', 'green', 'blue'}
# colors.add('gray')  # а новое значение добавится, но не обязательно в конец списка, мб и в середину, это не контролируется
# print(colors) # {'red', 'green', 'blue','gray'}

# colors.remove('red')    # Удаление значения из множетсва
# print(colors) # {'green', 'blue','gray'}

# colors.remove('red') # KeyError: 'red' - если попробуем удалить значение, которого и так нет в множетсве
# # Для этого есть функция .discard - сначала будет проверка наличия данного значения, а потом удаление, без ошибки
# colors.discard('red') # ok

# colors.clear()  # функция для очистки множетсва
# print(colors)   # set() - пустое множетсво


# Операции со множествами в Python:
# a = {1, 2, 3, 5, 8}
# b = {2, 5, 8, 13, 21}

# c = a.copy() # c = {1, 2, 3, 5, 8}  - копируем множество

# u = a.union(b) # u = {1, 2, 3, 5, 8, 13, 21}    - объединяем два множества a и b

# i = a.intersection(b) # i = {8, 2, 5} - ищем пересечения во множествах

# dl = a.difference(b) # dl = {1, 3} - находим разность во мнлжествах
# dr = b.difference(a) # dr = {13, 21}

# q = a.union(b).difference(a.intersection(b))# {1, 21, 3, 13}


# Неизменяемое или замороженное множество(frozenset) — множество, с которым не будут
# работать методы удаления и добавления.
# a = {1, 2, 3, 5, 8}
# b = frozenset(a)
# print(b) # frozenset({1, 2, 3, 5, 8})




# List comprehension — это упрощенный подход к созданию списка, который задействует цикл for, а также инструкции
# if-else для определения того, что в итоге окажется в финальном списке.

# Простая ситуация — список:
# list_1 = [exp for item in iterable]

# Выборка по заданному условию:
# list_1 = [exp for item in iterable (if conditional)]


# Создать список, состоящий из четных чисел в диапазоне от 1 до 100.
# 1. Создать список чисел от 1 до 100
# list_1 = []
# for i in range(1, 101):
#     list_1.append(i)
#     print(list_1) # [1, 2, 3,..., 100]

# Эту же функцию можно записать так:
# list_1 = [i for i in range(1, 101)] # [1, 2, 3,..., 100]

# Добавить условие (только чётные числа)
# list_1 = [i for i in range(1, 101) if i % 2 == 0]# [2, 4, 6,..., 100]

# Допустим, вы решили создать пары каждому из чисел (кортежи)
# list_1 = [(i, i) for i in range(1, 101) if i % 2 == 0]# [(2, 2), (4, 4),..., (100, 100)]

# Также можно умножать, делить, прибавлять, вычитать. Например, умножить значение на 2.
# list_1 = [i * 2 for i in range(10) if i % 2 == 0]
# print(list_1) # [0, 4, 8, 12, 16]