# Задача №17. Решение в группах
# Дан список чисел. Определите, сколько в нем
# встречается различных чисел.
# Input: [1, 1, 2, 0, -1, 3, 4, 4]
# Output: 6
# Примечание: Пользователь может вводить значения
# списка или список задан изначально.

# numbers = [1, 1, 2, 0, -1, 3, 4, 4]
# print(numbers)
# edited_numbers = set()                      # мой вариант решения - не самый быстрый тк есть цикл
# count = 0 
# for i in range(len(numbers)):
#     edited_numbers.add(numbers[i])
# print(len(edited_numbers))



# list = [1, 1, 2, 0, -1, 3, 4, 4]          # второй вариант решения - самый простой
# print(len(set(list)))



# list = [1, 1, 2, 0, -1, 3, 4, 4]        # третий вариант решения с двумя списками
# unique_list = []                        # создаем второй пустой список, куда будем складывать уникальные значения

# for i in list:                          # идем циклом по основному списку
#     if i not in unique_list:            # прооверяем значения , если они еще не встречались
#         unique_list.append(i)           # то записываем их в новый уникальный список
# print(list)
# print(len(unique_list))                 # печатаем длину нового уникально списка






# Задача №19. Решение в группах
# Дана последовательность из N целых чисел и число
# K. Необходимо сдвинуть всю последовательность
# (сдвиг - циклический) на K элементов вправо, K –
# положительное число.
# Input: [1, 2, 3, 4, 5] k = 3
# Output: [3, 4, 5, 1, 2]
# Примечание: Пользователь может вводить значения
# списка или список задан изначально.

# numbers = [1, 2, 3, 4, 5]       # начальный список
# print(numbers)

# k = 3                           # кол-во элементов, на которое надо сдвинуть список вправо
# # k %= len(numbers)             # если пользователь введет кол-во эл, на которое надо сдвинуть список
#                                 # превышающее кол-во эл-в в самом списке (получаем остаток от деления на кот надо сдвинуть список)
# d = numbers[-k:] + numbers[:-k]     # решение с помощью СРЕЗОВ (разделяем список на два среза и соединяем их, 
# print(d)                               # переставив значения местами)



    # Срезы встроены в язык и снабжены своим собственным синтаксисом — настолько широко они используются. 
    # Срез записывается так же, как записывается обращение к элементу списка по индексу:

    # some_list[START:STOP:STEP]
    # Всего у среза три параметра:

    # START — индекс первого элемента в выборке
    # STOP — индекс элемента списка, перед которым срез должен закончиться. 
    # Сам элемент с индексом STOP не будет входить в выборку
    # STEP — шаг прироста выбираемых индексов

    # >>> a = [1, 3, 8, 7]
    # >>> a[:]
    # [1, 3, 8, 7]
    # >>> a[1:]
    # [3, 8, 7]
    # >>> a[:3]
    # [1, 3, 8]
    # >>> a[::2]
    # [1, 8]

    # Также все эти параметры могут быть и отрицательными:
    # >>> a = [1, 3, 8, 7]
    # >>> a[::-1]
    # [7, 8, 3, 1]
    # >>> a[:-2]
    # [1, 3]
    # >>> a[-2::-1]
    # [8, 3, 1]
    # >>> a[1:4:-1]
    # []





# Задача №21. Общее обсуждение
# Напишите программу для печати всех уникальных
# значений в словаре.
# Input: [{"V": "S001"}, {"V": "S002"}, {"VI": "S001"},
# {"VI": "S005"}, {"VII": " S005 "}, {" V ":" S009 "}, {" VIII
# ":" S007 "}]
# Output: {'S005', 'S002', 'S007', 'S001', 'S009'}
# Примечание: Список словарей задан изначально.
# Пользователь его не вводит

# data = [{"V": "S001"}, {"V": "S002"},
#         {"VI": "S001"}, {"VI": "S005"},
#         {"VII": "S005"}, {"V":"S009"},
#         {"VIII":"S007"}]

# result = set()

# for i in data:
#     result.add(list(i.values())[0])
# print(result)






# Задача №23. Решение в группах
# Дан массив, состоящий из целых чисел. Напишите
# программу, которая подсчитает количество
# элементов массива, больших предыдущего (элемента
# с предыдущим номером)
# Input: [0, -1, 5, 2, 3]
# Output: 2 (-1 < 5, 2 < 3)
# Примечание: Пользователь может вводить значения
# списка или список задан изначально.

n = [0, -1, 5, 2, 3]
print(n)
count = 0

for i in range(1, len(n)):
    if n[i] > n[i -1]:
        count += 1
print(count)
